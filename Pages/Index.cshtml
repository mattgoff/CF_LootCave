@page
@model IndexModel
@{
    ViewData["Title"] = "Loot Cave";
}


<div class="container col-sm-6">
    <img style="padding-top: 60px" src="~/images/image.png" alt="">
</div>
<div class="text-center">
    @* <h1 class="display-4 titleFont">Loot Cave</h1> *@
<p class="text-left indent pageFont">You are Cody Jones, legendary treasure
hunter, you have found the mythical treasure
island that stores the gold of the famed pirate
Captain Flint. You have learned through your
exploration of the island that he has stored his
gold in a series of loot caves. But with all pirates
there is a trap you cannot simply loot each cave.
Each cave has a certain amount of gold stashed,
but to keep you from looting each of them the
caves are connected to an underground lava
chamber. If you a loot a cave the adjacent caves
are filled with lava. This trap makes the caves
impossible to loot.</p>


<p class="text-left indent apiFont">Given a list of non-negative integers
representing the amount of gold of each cave,
determine the maximum amount of gold you
can loot without dying in the lava.</p>



<div class="container apiFont">
    <div class="row">
        <div class="col-sm-4">
            <p class="text-left">
            <span class="bolded">Example:</span><br />
            <span class="bolded">Input: </span>8,2,1,9,1,1,9<br />
            <span class="bolded">Output: </span>26<br />
            <span class="bolded">Explanation: </span>Loot cave 1 (gold = 8), loot<br />
            cave 4 (gold = 9), loot cave 7 (gold =9). Best
            amount you can loot = 8 + 9 + 9 = 26.<br />
            </p>
        </div>
        <div class="col-sm-3">
            <p class="text-left">
                <span class="bolded">Constraints</span><br />
                • 0 <= nums.length <= 100<br />
                • 0 <= nums[i] <= 400<br />
            </p>
        </div>
        <div class="col-sm-5 text-left">
            @* <span class="bolded">Cave List: </span><br />
                <span class="indent">@string.Join(", ", Model.caveData.CaveList) </span><br />
            <span class="bolded">Number of Caves: </span><br />
                <span class="indent">@Model.caveData.CaveList.Count </span><br />
            <span class="bolded">Number of Caves Looted: </span><br />
                <span class="indent">@Model.caveData.MaxCavesByIndex.Count </span><br />
            <span class="bolded">Cave # Looted: (1 based indexing)</span><br />
                <span class="indent">@string.Join(", ", Model.caveData.MaxCavesByIndex) </span><br />
            <span class="bolded">Gold Looted: </span><br />
                <span class="indent">@string.Join(", ", Model.caveData.MaxCavesByInteger) </span><br />
            <span class="bolded">Total Gold Looted: </span><br />
                <span class="indent">@Model.caveData.MaxCaveLoot </span><br /> *@
            <table class="table-sm">
                <tbody>
                    <tr>
                        <td class="bolded">Cave List:</td>
                        <td></td>
                        <td>@string.Join(", ", Model.caveData.CaveList)</td>
                    </tr>
                    <tr>
                        <td class="bolded">Number of Caves:</td>
                        <td></td>
                        <td>@string.Join(", ", @Model.caveData.CaveList.Count)</td>
                    </tr>
                    <tr>
                        <td class="bolded">Number of Caves Looted:</td>
                        <td></td>
                        <td>@string.Join(", ", @Model.caveData.MaxCavesByIndex.Count)</td>
                    </tr>
                    <tr>
                        <td class="bolded">Caves Looted: <br /> <span class="indentSpan">(1 based index)</span></td>
                        <td></td>
                        <td>@string.Join(", ", Model.caveData.MaxCavesByIndex)</td>
                    </tr>
                    <tr>
                        <td class="bolded">Gold Looted from Cave:</td>
                        <td></td>
                        <td>@string.Join(", ", Model.caveData.MaxCavesByInteger)</td>
                    </tr>
                    <tr>
                        <td class="bolded">Total Gold Looted:</td>
                        <td></td>
                        <td>@Model.caveData.MaxCaveLoot</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <form method="post" asp-action="OnPost" enctype="multipart/form-data">
                <div class="form-group row">
                    <div class="col-3">
                        <label asp-for="CaveListFromForm">Enter a list of caves to search:</label>
                    </div>
                    <div class="col-3">
                        <input asp-for="CaveListFromForm" class="form-control" />
                        <span asp-validation-for="CaveListFromForm" clas="text-danger"></span>
                        <br />
                        <button type="submit" class="btn btn-primary float-right">Submit</button>
                    </div>
                    <div class="col-2">
                    </div>
                </div>
    </form>
<br />
    <div class="container">
        <table class="tableCSS">
            <tbody>
                <tr>
                    <td>Cave # - </td>
                    @for (var i = 0; i < Model.caveData.CaveList.Count; i++)
                    {
                        if(Model.caveData.MaxCavesByIndex.Contains(i + 1))
                        {
                            var counter = i + 1;
                            <td style="background-color: #6ded68;">@counter</td>
                        }
                        else
                        {
                            var counter = i + 1;
                            <td style="background-color: #f7615e">@counter</td>
                        }

                    }
                </tr>
                <tr>
                    <td>Available Gold - </td>
                    @foreach (var item in Model.caveData.CaveList)
                    {
                        <td>@item</td>
                    }
                </tr>
                <tr>
                    <td>Gold or Lava - </td>
                    @for (var i = 0; i < Model.caveData.CaveList.Count; i++)
                    {
                        if(Model.caveData.MaxCavesByIndex.Contains(i + 1))
                        {
                            <td> <img class="shrinkImg" src="~/images/gold.jpeg" title="Gold"> </td>
                        }
                        else
                        {
                            <td> <img class="shrinkImg" src="~/images/lava3.jpeg" title="Lava"> </td>
                        }

                    }
                </tr>
            </tbody>
        </table>
        <br />
        <span class="bolded apiFont">Total Gold Looted: @Model.caveData.MaxCaveLoot</span>
    </div>

    <div class="container apiFont col-sm-8">
        <br /><br />
        <p class="text-left">Tired of trying to figure out this algorithm? Just want the data?<br />
    Send a 'POST' request to:<br />
                             <span class="indentSpan">https://cflootcave.azurewebsites.net/api/lootcave</span>
    Format the body of the request as a json object with your cave map:<br />
        <span class="indentSpan">{ "CaveList": "8,2,1,9,1,1,9" }</span>
    I'll return you a shiney new json object with everything you'll need. <br/> Feel free to try it in Postman.</p>
    </div>
</div>
</div>
